import x from"@babel/plugin-transform-react-jsx";import m from"node:path";import{fileURLToPath as f}from"node:url";import{declare as u}from"@babel/helper-plugin-utils";import*as e from"@babel/types";const E=m.dirname(f(import.meta.url)),g=u(l=>(l.assertVersion(7),{name:"log-jsx-plugin",visitor:{Program(i,s){if(s.filename?.includes(m.resolve(E,"../../../vynn")))return;let n=!1;if(i.get("body").forEach(r=>{r.isImportDeclaration()&&r.node.source.value==="vynn/jsx-runtime"&&r.node.specifiers.forEach(o=>{if(e.isImportSpecifier(o)){const a=o.imported;e.isIdentifier(a)&&a.name==="logJsx"&&(n=!0)}})}),!n){const r=e.importDeclaration([e.importSpecifier(e.identifier("logJsx"),e.identifier("logJsx"))],e.stringLiteral("vynn/jsx-runtime"));i.unshiftContainer("body",r)}},CallExpression(i){const s=i.get("callee");if(e.isMemberExpression(s.node)&&e.isIdentifier(s.node.object,{name:"console"})&&e.isIdentifier(s.node.property)){const n=i.node.arguments.map(r=>e.isJSXElement(r)||e.isJSXFragment(r)?e.callExpression(e.identifier("logJsx"),[r]):r);n.some((r,o)=>r!==i.node.arguments[o])&&(i.node.arguments=n)}}}})),S=u(l=>(l.assertVersion(7),{name:"loop-auto-wrap-plugin",pre(){const i=this.file.metadata;i.importedLoops=new Set,i.localLoops=new Set},visitor:{Program(i,s){const n=s.file.metadata,r=n.importedLoops,o=n.localLoops;i.get("body").forEach(a=>{a.isImportDeclaration()&&a.node.source.value==="vynn"&&a.node.specifiers.forEach(t=>{e.isImportSpecifier(t)&&e.isIdentifier(t.imported,{name:"loop"})&&r.add(t.local.name)}),a.isFunctionDeclaration()&&e.isIdentifier(a.node.id)&&o.add(a.node.id.name),a.isVariableDeclaration()&&a.node.declarations.forEach(t=>{e.isIdentifier(t.id)&&o.add(t.id.name)})})},CallExpression(i,s){const n=s.file.metadata,r=n.importedLoops,o=n.localLoops,a=i.get("callee");if(!a.isIdentifier())return;const t=a.node.name;if(r.has(t)&&!o.has(t)&&i.node.arguments.length===1){const p=i.node.arguments[0];!e.isArrowFunctionExpression(p)&&e.isExpression(p)&&(i.node.arguments[0]=e.arrowFunctionExpression([],p))}}}})),h=u(l=>{l.assertVersion(7);function i(s){const n=[];if(s.node.children.forEach((o,a)=>{if(e.isJSXText(o)){let t=o.value;(!t.includes(`
`)||t.trim()!=="")&&(a===0&&(t=t.trimStart()),a===s.node.children.length-1&&(t=t.trimEnd()),n.push(e.arrowFunctionExpression([],e.stringLiteral(t))))}else if(e.isJSXElement(o)||e.isJSXFragment(o))n.push(e.arrowFunctionExpression([],o));else if(e.isJSXExpressionContainer(o)&&!e.isJSXEmptyExpression(o.expression)){const t=o.expression;e.isStringLiteral(t)?n.push(t):n.push(e.arrowFunctionExpression([],t))}}),n.length===0)return;let r=n.length===1?n[0]:e.arrayExpression(n);e.isArrowFunctionExpression(r)||(r=e.arrowFunctionExpression([],r)),s.node.children=[e.jsxExpressionContainer(r)]}return{name:"wrap-jsx-children-plugin",visitor:{JSXElement(s){i(s)},JSXFragment(s){i(s)}}}}),v=u(l=>(l.assertVersion(7),{name:"wrap-jsx-expression-plugin",visitor:{JSXOpeningElement(i){const s=i.node.attributes.map(n=>{if(!e.isJSXAttribute(n)||!n.value)return n;const r=e.isJSXIdentifier(n.name)?n.name.name:null;if(r==="ref"&&e.isJSXExpressionContainer(n.value)&&e.isIdentifier(n.value.expression)){const t=n.value.expression,p=e.identifier("elem"),c=e.assignmentExpression("=",t,p),d=e.arrowFunctionExpression([p],c);return e.jsxAttribute(e.jsxIdentifier(r),e.jsxExpressionContainer(d))}let o=null;if(e.isStringLiteral(n.value)?o=n.value:e.isJSXExpressionContainer(n.value)&&(e.isJSXEmptyExpression(n.value.expression)||(o=n.value.expression)),o===null||r===null)return n;const a=e.arrowFunctionExpression([],o);return e.jsxAttribute(e.jsxIdentifier(r),e.jsxExpressionContainer(a))});i.node.attributes=s},JSXExpressionContainer(i){const s=i.node.expression;if(e.isJSXEmptyExpression(s)||e.isFunction(s)||e.isArrowFunctionExpression(s)||e.isLiteral(s))return;const n=e.arrowFunctionExpression([],s);i.replaceWith(e.jsxExpressionContainer(n))}}}));function J(l,i={ssr:!1}){return l.assertVersion(7),{plugins:[[x,{runtime:"automatic",importSource:i.ssr?"vynn/server":"vynn",jsx:"preserve"}],g,S,h,v]}}export{J as default};
//# sourceMappingURL=index.js.map
