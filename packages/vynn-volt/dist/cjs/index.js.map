{"version":3,"file":"index.js","sources":["../../src/file-system-router.ts","../../src/define-config.ts"],"sourcesContent":["import fs from \"node:fs\";\n\nimport path from \"path\";\nimport { AppOptions, RouterSchemaInput } from \"vinxi\";\nimport { BaseFileSystemRouter, cleanPath } from \"vinxi/fs-router\";\n\nclass VynnFileSystemRouter extends BaseFileSystemRouter {\n  toPath(filePath: string) {\n    // only treat \"page.tsx/ts/jsx/js\" as routes\n    if (!/page\\.(t|j)sx?$/.test(path.basename(filePath))) {\n      return \"\";\n    }\n\n    const routePath = cleanPath(filePath, this.config)\n      .replace(/\\/page$/, \"\") // remove trailing /page\n      .replace(/\\[([^/]+)\\]/g, (_, m) => {\n        if (m.startsWith(\"...\")) return `*${m.slice(3)}`;\n        return `:${m}`;\n      });\n\n    return routePath?.length > 0 ? `${routePath}` : \"/\";\n  }\n\n  toRoute(filePath: string) {\n    const routePath = this.toPath(filePath);\n    if (!routePath) return null; // skip non-page files\n\n    const dir = path.dirname(filePath);\n    const layoutFilePath = path.join(dir, \"layout.tsx\");\n\n    return {\n      $$component: {\n        src: filePath,\n        pick: [\"default\"],\n      },\n      ...(fs.existsSync(layoutFilePath)\n        ? {\n            $$layout: {\n              src: layoutFilePath,\n              pick: [\"default\"],\n            },\n          }\n        : {}),\n      path: routePath,\n      filePath,\n    };\n  }\n}\n\ntype RouterOptions = {\n  dir: string;\n};\n\nexport function fileSystemRouter({ dir }: RouterOptions) {\n  return (router: RouterSchemaInput, app: AppOptions) => {\n    return new VynnFileSystemRouter(\n      {\n        dir,\n        extensions: [\"tsx\", \"ts\", \"jsx\", \"js\"],\n      },\n      router,\n      app,\n    );\n  };\n}\n","// @ts-expect-error no type\nimport { serverFunctions } from \"@vinxi/server-functions/plugin\";\nimport path from \"path\";\nimport { AppOptions, createApp } from \"vinxi\";\nimport { PluginOption } from \"vite\";\nimport vynn from \"vite-plugin-vynn\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\n\nimport { fileSystemRouter } from \"./file-system-router\";\n\ntype DefineConfig = {\n  plugins: PluginOption[];\n  server?: AppOptions[\"server\"];\n};\n\nexport function defineConfig({ plugins, server = {} }: DefineConfig) {\n  const rootDir = process.cwd();\n  return createApp({\n    devtools: true,\n    server: {\n      compressPublicAssets: {\n        brotli: process.versions.bun ? false : true,\n      },\n      ...server,\n    },\n    routers: [\n      {\n        name: \"public\",\n        type: \"static\",\n        dir: path.resolve(rootDir, \"./public\"),\n        base: \"/\",\n      },\n      {\n        name: \"ssr\",\n        type: \"http\",\n        base: \"/\",\n        target: \"server\",\n        handler: path.resolve(rootDir, \"./src/entry-server.tsx\"),\n        plugins: () => [vynn({ ssr: true }), tsconfigPaths(), ...plugins],\n        routes: fileSystemRouter({ dir: path.resolve(rootDir, \"./src/app\") }),\n        link: {\n          client: \"client\",\n        },\n      },\n      {\n        name: \"client\",\n        type: \"client\",\n        base: \"/_build\",\n        target: \"browser\",\n        handler: path.resolve(rootDir, \"./src/entry-client.tsx\"),\n        plugins: () => [serverFunctions.client(), vynn({ ssr: true }), tsconfigPaths(), ...plugins],\n        routes: fileSystemRouter({ dir: path.resolve(rootDir, \"./src/app\") }),\n      },\n      serverFunctions.router({ plugins: () => [tsconfigPaths()] }),\n    ],\n  });\n}\n"],"names":["VynnFileSystemRouter","BaseFileSystemRouter","toPath","filePath","test","path","basename","routePath","cleanPath","config","replace","_","m","startsWith","slice","length","toRoute","dir","dirname","layoutFilePath","join","$$component","src","pick","fs","existsSync","$$layout","fileSystemRouter","router","app","extensions","defineConfig","plugins","server","rootDir","process","cwd","createApp","devtools","compressPublicAssets","brotli","versions","bun","routers","name","type","resolve","base","target","handler","vynn","ssr","tsconfigPaths","routes","link","client","serverFunctions"],"mappings":"mNAMA,MAAMA,UAA6BC,EAAAA,oBAAqB,CACtDC,OAAOC,EAAkB,CAEvB,GAAI,CAAC,kBAAkBC,KAAKC,EAAKC,SAASH,CAAQ,CAAC,EACjD,MAAO,GAGT,MAAMI,EAAYC,EAAAA,UAAUL,EAAU,KAAKM,MAAM,EAC9CC,QAAQ,UAAW,EAAE,EACrBA,QAAQ,eAAgB,CAACC,EAAGC,IACvBA,EAAEC,WAAW,KAAK,EAAU,IAAID,EAAEE,MAAM,CAAC,CAAC,GACvC,IAAIF,CAAC,EACb,EAEH,OAAOL,GAAWQ,OAAS,EAAI,GAAGR,CAAS,GAAK,GAClD,CAEAS,QAAQb,EAAkB,CACxB,MAAMI,EAAY,KAAKL,OAAOC,CAAQ,EACtC,GAAI,CAACI,EAAW,OAAO,KAEvB,MAAMU,EAAMZ,EAAKa,QAAQf,CAAQ,EAC3BgB,EAAiBd,EAAKe,KAAKH,EAAK,YAAY,EAElD,MAAO,CACLI,YAAa,CACXC,IAAKnB,EACLoB,KAAM,CAAC,SAAS,CAClB,EACA,GAAIC,EAAGC,WAAWN,CAAc,EAC5B,CACEO,SAAU,CACRJ,IAAKH,EACLI,KAAM,CAAC,SAAS,CAClB,CACF,EACA,CAAA,EACJlB,KAAME,EACNJ,SAAAA,CACF,CACF,CACF,UAMgBwB,EAAiB,CAAEV,IAAAA,CAAmB,EAAG,CACvD,MAAO,CAACW,EAA2BC,IAC1B,IAAI7B,EACT,CACEiB,IAAAA,EACAa,WAAY,CAAC,MAAO,KAAM,MAAO,IAAI,CACvC,EACAF,EACAC,CACF,CAEJ,CCjDO,SAASE,EAAa,CAAEC,QAAAA,EAASC,OAAAA,EAAS,CAAA,CAAiB,EAAG,CACnE,MAAMC,EAAUC,QAAQC,IAAAA,EACxB,OAAOC,EAAAA,UAAU,CACfC,SAAU,GACVL,OAAQ,CACNM,qBAAsB,CACpBC,OAAQL,CAAAA,QAAQM,SAASC,GAC3B,EACA,GAAGT,CACL,EACAU,QAAS,CACP,CACEC,KAAM,SACNC,KAAM,SACN5B,IAAKZ,EAAKyC,QAAQZ,EAAS,UAAU,EACrCa,KAAM,GACR,EACA,CACEH,KAAM,MACNC,KAAM,OACNE,KAAM,IACNC,OAAQ,SACRC,QAAS5C,EAAKyC,QAAQZ,EAAS,wBAAwB,EACvDF,QAASA,IAAM,CAACkB,EAAK,CAAEC,IAAK,EAAK,CAAC,EAAGC,IAAiB,GAAGpB,CAAO,EAChEqB,OAAQ1B,EAAiB,CAAEV,IAAKZ,EAAKyC,QAAQZ,EAAS,WAAW,CAAE,CAAC,EACpEoB,KAAM,CACJC,OAAQ,QACV,CACF,EACA,CACEX,KAAM,SACNC,KAAM,SACNE,KAAM,UACNC,OAAQ,UACRC,QAAS5C,EAAKyC,QAAQZ,EAAS,wBAAwB,EACvDF,QAASA,IAAM,CAACwB,EAAAA,gBAAgBD,OAAAA,EAAUL,EAAK,CAAEC,IAAK,EAAK,CAAC,EAAGC,EAAAA,EAAiB,GAAGpB,CAAO,EAC1FqB,OAAQ1B,EAAiB,CAAEV,IAAKZ,EAAKyC,QAAQZ,EAAS,WAAW,CAAE,CAAC,CACtE,EACAsB,EAAAA,gBAAgB5B,OAAO,CAAEI,QAASA,IAAM,CAACoB,GAAe,CAAE,CAAC,CAAC,CAEhE,CAAC,CACH"}